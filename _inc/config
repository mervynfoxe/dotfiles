# Load any custom config/settings
if [[ -f $DOTFILES_DIR/_inc/config.custom ]]; then
    source $DOTFILES_DIR/_inc/config.custom
fi

# Set config defaults
# Add a "bin/" directory under the user's homedir to the PATH
DOTFILES_CONFIG_HOME_BIN="${DOTFILES_CONFIG_HOME_BIN:-1}"
# Configure Python's startup script
DOTFILES_CONFIG_PYTHON="${DOTFILES_CONFIG_PYTHON:-1}"
# Configure GPG to use the terminal's pinentry when called from the terminal,
# and otherwise allow a GUI pinentry program
DOTFILES_CONFIG_GPG_PINENTRY="${DOTFILES_CONFIG_GPG_PINENTRY:-0}"
# Configure SSH to use keys on the GPG keychain
DOTFILES_CONFIG_GPG_SSH="${DOTFILES_CONFIG_GPG_SSH:-0}"

if [ $DOTFILES_CONFIG_HOME_BIN -eq 1 ]; then
    export PATH="$HOME/bin:$PATH"
fi

if [ $DOTFILES_CONFIG_PYTHON -eq 1 ]; then
    # Call .pythonrc.py when Python is started
    # Set up tab completion for Python 2
    export PYTHONSTARTUP=~/.pythonrc.py
fi

if [ $DOTFILES_CONFIG_GPG_PINENTRY -eq 1 ]; then
    # Set GPG to use terminal pinentry in terminal sessions (GUI otherwise)
    export GPG_TTY=$(tty)
    export PINENTRY_USER_DATA="USE_CURSES=1"
fi

if [ $DOTFILES_CONFIG_GPG_SSH -eq 1 ]; then
    # Set gpg-agent to handle SSH
    unset SSH_AGENT_PID
    if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
    export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
    fi
    gpg-connect-agent updatestartuptty /bye >/dev/null
fi
