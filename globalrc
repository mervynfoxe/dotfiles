#
# OS detection
#
UNAME=`uname`
DEFAULT_USER=`whoami`
CURRENT_OS='Linux'
DISTRO=''
OS_VERSION=''

if [[ $UNAME == 'Darwin' ]]; then
    CURRENT_OS='OS X'
    OS_VERSION=$(sw_vers -productVersion)
elif [[ $UNAME == 'Linux' ]]; then
    CURRENT_OS='Linux'
    if [[ -f /etc/lsb-release ]]; then
        source /etc/lsb-release
        DISTRO=$DISTRIB_ID
        OS_VERSION=$DISTRIB_RELEASE
    fi
elif [[ $UNAME == CYGWIN_NT* ]]; then
    CURRENT_OS='Cygwin'
fi


#
# Functions
#

# Go up directory tree X times
function up() {
    counter="$@"
    if [[ -z $counter ]]; then
        counter=1
    fi
    if [ $counter -eq $counter 2> /dev/null ]; then
        until [[ $counter -lt 1 ]]; do
            cd ..
            let counter-=1
        done
    else
        echo "usage: up [NUMBER]"
        return 1
    fi
    return 0
}

# Make and cd into a directory
function mkcd() {
    mkdir -p "$1" && cd "$1";
    return 0
}

# cd into a directory and list its contents
function cdls() {
    if [[ $1 == "" ]]; then
        cd
    else
        cd "$1"
    fi
    if [[ $CURRENT_OS == 'Linux' ]]; then
        ls -Ap --group-directories-first --color=auto
    elif [[ $CURRENT_OS == 'OS X' ]]; then
        ls -AGp
    else
        ls
    fi
    return 0
}

# Go up X directories and then list the new directory's contents
function upls() {
    up $1;
    pwd;
    if [[ $CURRENT_OS == 'Linux' ]]; then
        ls -Ap --group-directories-first --color=auto
    elif [[ $CURRENT_OS == 'OS X' ]]; then
        ls -AGp
    else
        ls
    fi
    return 0
}

# In a git repository, print out branch status for all local branches, how many commits ahead/behind they are
function git-branch-status() {
    if [[ $1 != '-n' ]]; then
        git remote update
    fi
    echo ''
    git for-each-ref --format="%(refname:short) %(upstream:short)" refs/heads | \
    while read local remote
    do
        [ -z "$remote" ] && continue
        git rev-list --left-right ${local}...${remote} -- 2>/dev/null >/tmp/git_upstream_status_delta || continue
        LEFT_AHEAD=$(grep -c '^<' /tmp/git_upstream_status_delta)
        RIGHT_AHEAD=$(grep -c '^>' /tmp/git_upstream_status_delta)
        echo "$local (ahead $LEFT_AHEAD) | (behind $RIGHT_AHEAD) $remote"
    done
    return 0
}

# In a git repository, update all local branches
function git-pull-all() {
    cur_branch=$(git rev-parse --abbrev-ref HEAD)
    for branch in $(git branch | tr -d " *"); do
        git checkout $branch
        git pull
        echo ''
    done
    git checkout $cur_branch
}

# In a git repository, check out a WIP branch and make a WIP commit
function git-wip() {
    branch="${1:-$(whoami)-wip}"

    git branch "$branch"
    git checkout "$branch"
    git add -A
    git rm $(git ls-files --deleted) 2> /dev/null
    git commit --no-verify --no-gpg-sign -m "--wip--"
}

# Retrieve the current git branch
function parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (git:\1)/'
}

# Determine if we are currently in a gitpod workspace
function is::gitpod() {
    test -e /ide/bin/gitpod-code && test -n $GITPOD_REPO_ROOT
}
